/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("var canvas = document.getElementById('canvas');\r\nvar ctx = canvas.getContext('2d');\r\nvar ballX = canvas.width / 2;\r\nvar ballY = canvas.height - 30;\r\nvar ballDX = 1;\r\nvar ballDY = -1;\r\nvar ballRadious = 10;\r\nvar FPS = 0;\r\nvar frameCount = 0;\r\nvar frameLock = false;\r\nvar paddleH = 10;\r\nvar paddleW = 50;\r\nvar paddleX = (canvas.width - paddleW) / 2;\r\nvar paddleY = canvas.height - paddleH;\r\nvar moveLeft = false;\r\nvar moveRight = false;\r\nvar paddleSpeed = 7;\r\nvar gameOver = false;\r\nvar brickRowCount = 3;\r\nvar brickColumnCount = 5;\r\nvar brickW = 75;\r\nvar brickH = 20;\r\nvar brickPadding = 10;\r\nvar brickOffsetTop = 30;\r\nvar brickOffsetLeft = 30;\r\nvar bricks = new Array();\r\nfor (var c = 0; c < brickColumnCount; c++) {\r\n    bricks[c] = [];\r\n    for (var r = 0; r < brickRowCount; r++) {\r\n        bricks[c][r] = { x: 0, y: 0, isAlive: true };\r\n    }\r\n}\r\nvar score = 0;\r\nvar victory = false;\r\nvar victoryPlayed = false;\r\nvar lives = 3;\r\nfunction FMODpreRun() {\r\n    console.log('FMOD preRun. Mounting files...');\r\n    fmod.FS_createPreloadedFile('/', 'Master.bank', './assets/sound/fmod/Build/Desktop/Master.bank', true, false);\r\n    fmod.FS_createPreloadedFile('/', 'Master.strings.bank', './assets/sound/fmod/Build/Desktop/Master.strings.bank', true, false);\r\n    fmod.FS_createPreloadedFile('/', 'SFX.bank', './assets/sound/fmod/Build/Desktop/SFX.bank', true, false);\r\n}\r\nfunction FMODmain() {\r\n    console.log('FMOD Runtime Initialized!');\r\n    var outval = {};\r\n    fmod.Studio_System_Create(outval);\r\n    var system = outval.val;\r\n    system.initialize(128, 0 /* FMOD.STUDIO_INITFLAGS.NORMAL */, 0 /* FMOD.INITFLAGS.NORMAL */, null);\r\n    system.loadBankFile('Master.bank', 0 /* FMOD.STUDIO_LOAD_BANK_FLAGS.NORMAL */, outval);\r\n    system.loadBankFile('Master.strings.bank', 0 /* FMOD.STUDIO_LOAD_BANK_FLAGS.NORMAL */, outval);\r\n    system.loadBankFile('SFX.bank', 0 /* FMOD.STUDIO_LOAD_BANK_FLAGS.NORMAL */, outval);\r\n    system.getEvent('event:/boop', outval);\r\n    var desc = outval.val;\r\n    desc.createInstance(outval);\r\n    var inst = outval.val;\r\n    inst.start();\r\n    function playSound(sound) {\r\n        system.getEvent(sound, outval);\r\n        var desc = outval.val;\r\n        desc.createInstance(outval);\r\n        var inst = outval.val;\r\n        inst.start();\r\n    }\r\n    function drawLoop() {\r\n        //Clear Frame\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        //FPS counter\r\n        ctx.beginPath();\r\n        ctx.font = \"20px 'Pixeloid'\";\r\n        ctx.fillStyle = 'green';\r\n        ctx.textAlign = 'left';\r\n        ctx.fillText(\"FPS: \" + FPS, 10, 20);\r\n        ctx.closePath();\r\n        //Score counter\r\n        ctx.beginPath();\r\n        ctx.font = \"20px 'Pixeloid'\";\r\n        ctx.fillStyle = 'green';\r\n        ctx.textAlign = 'right';\r\n        var scoreS = String(\"Score: \" + score);\r\n        ctx.fillText(scoreS, canvas.width - scoreS.length, 20);\r\n        ctx.closePath();\r\n        //Life counter\r\n        ctx.beginPath();\r\n        ctx.font = \"20px 'Pixeloid'\";\r\n        ctx.fillStyle = 'green';\r\n        ctx.textAlign = 'right';\r\n        var liveS = String(\"Lives: \" + lives);\r\n        ctx.fillText(liveS, canvas.width - scoreS.length, 40);\r\n        ctx.closePath();\r\n        //Draw ball\r\n        ctx.beginPath();\r\n        ctx.arc(ballX, ballY, ballRadious, 0, Math.PI * 2);\r\n        ctx.strokeStyle = 'green';\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        //Draw Paddle\r\n        ctx.beginPath();\r\n        ctx.fillStyle = 'green';\r\n        ctx.fillRect(paddleX, paddleY, paddleW, paddleH);\r\n        ctx.closePath();\r\n        //Draw Border\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'green';\r\n        ctx.strokeRect(0, 0, canvas.width - 1, canvas.height - 1);\r\n        ctx.closePath();\r\n        //Draw Bricks & Victory check\r\n        victory = true;\r\n        for (var c = 0; c < brickColumnCount; c++) {\r\n            for (var r = 0; r < brickRowCount; r++) {\r\n                if (bricks[c][r].isAlive) {\r\n                    bricks[c][r].x = c * (brickW + brickPadding) + brickOffsetLeft;\r\n                    bricks[c][r].y = r * (brickH + brickPadding) + brickOffsetTop;\r\n                    ctx.beginPath();\r\n                    ctx.strokeStyle = 'green';\r\n                    ctx.strokeRect(bricks[c][r].x, bricks[c][r].y, brickW, brickH);\r\n                    ctx.closePath();\r\n                    victory = false;\r\n                }\r\n            }\r\n        }\r\n        //Colision check\r\n        if (ballY + ballDY < ballRadious) {\r\n            ballDY = -ballDY;\r\n            playSound('event:/boop');\r\n        }\r\n        else if (ballY + ballDY > canvas.height - ballRadious && !gameOver) {\r\n            if (ballX > paddleX && ballX < paddleX + paddleW) {\r\n                ballDY = -ballDY;\r\n                playSound('event:/boop');\r\n            }\r\n            else {\r\n                if (lives == 0) {\r\n                    gameOver = true;\r\n                    playSound('event:/lose');\r\n                }\r\n                else {\r\n                    ballDY = -ballDY;\r\n                    playSound('event:/boop');\r\n                    lives--;\r\n                }\r\n            }\r\n        }\r\n        if (ballX + ballDX < ballRadious || ballX + ballDX > canvas.width - ballRadious) {\r\n            ballDX = -ballDX;\r\n            playSound('event:/boop');\r\n        }\r\n        for (var c = 0; c < brickColumnCount; c++) {\r\n            for (var r = 0; r < brickRowCount; r++) {\r\n                var brick = bricks[c][r];\r\n                if (ballX > brick.x && ballX < brick.x + brickW && ballY > brick.y && ballY < brick.y + brickH && brick.isAlive) {\r\n                    ballDY = -ballDY;\r\n                    brick.isAlive = false;\r\n                    score++;\r\n                    playSound('event:/brick');\r\n                }\r\n            }\r\n        }\r\n        if (!gameOver && !victory) {\r\n            //Move check\r\n            if (moveRight && paddleX - paddleSpeed < canvas.width - paddleW) {\r\n                paddleX += paddleSpeed;\r\n            }\r\n            else if (moveLeft && paddleX + paddleSpeed > 0) {\r\n                paddleX -= paddleSpeed;\r\n            }\r\n            //Move ball\r\n            ballX += ballDX;\r\n            ballY += ballDY;\r\n        }\r\n        else if (!victory) {\r\n            ctx.beginPath();\r\n            ctx.font = \"40px 'Pixeloid'\";\r\n            ctx.fillStyle = 'green';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(\"GAME OVER\", canvas.width / 2, canvas.height / 2);\r\n            ctx.closePath();\r\n        }\r\n        else {\r\n            ctx.beginPath();\r\n            ctx.font = \"40px 'Pixeloid'\";\r\n            ctx.fillStyle = 'green';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillText(\"YOU WIN\", canvas.width / 2, canvas.height / 2);\r\n            ctx.closePath();\r\n            if (!victoryPlayed) {\r\n                playSound('event:/win');\r\n                victoryPlayed = true;\r\n            }\r\n        }\r\n        frameCount++;\r\n        requestAnimationFrame(drawLoop);\r\n    }\r\n    drawLoop();\r\n    setInterval(function () {\r\n        system.update();\r\n    }, 1000 / 60);\r\n}\r\nvar fmod = {\r\n    TOTAL_MEMORY: 24 * 1024 * 1024,\r\n    preRun: FMODpreRun,\r\n    onRuntimeInitialized: FMODmain\r\n};\r\nFMODModule(fmod);\r\nfunction countFPS() {\r\n    FPS = frameCount;\r\n    frameCount = 0;\r\n}\r\nfunction keyDownH(e) {\r\n    if (e.key == 'ArrowRight' || e.key == 'Right' || e.key == 'KeyD' || e.key == 'd') {\r\n        moveRight = true;\r\n    }\r\n    if (e.key == 'ArrowLeft' || e.key == 'Left' || e.key == 'KeyA' || e.key == 'a') {\r\n        moveLeft = true;\r\n    }\r\n}\r\nfunction keyUpH(e) {\r\n    if (e.key == 'ArrowRight' || e.key == 'Right' || e.key == 'KeyD' || e.key == 'd') {\r\n        moveRight = false;\r\n    }\r\n    if (e.key == 'ArrowLeft' || e.key == 'Left' || e.key == 'KeyA' || e.key == 'a') {\r\n        moveLeft = false;\r\n    }\r\n}\r\ndocument.addEventListener('keydown', keyDownH, false);\r\ndocument.addEventListener('keyup', keyUpH, false);\r\nsetInterval(countFPS, 1000);\r\n\n\n//# sourceURL=webpack://breakoutts/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;